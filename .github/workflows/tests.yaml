name: Test Suite for CoreDNS

on:
  - pull_request

jobs:
  lint-and-unit-tests:
    name: Lint & Unit tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install Tox
      run: pip install tox
    - name: Run lint & unit tests
      run: tox

  func-test:
    name: Functional test with MicroK8s
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Check out repo
      uses: actions/checkout@v2

    - name: Install MicroK8s
      uses: balchua/microk8s-actions@v0.2.2
      with:
        channel: 'latest/stable'
        addons: '["dns", "storage", "rbac"]'

    - name: Install Dependencies
      run: |
        set -eux
        sudo snap install charmcraft --classic --channel=latest/candidate
        sudo snap install juju --classic
        sudo snap install juju-wait --classic
        sudo snap install yq
        sudo apt update
        sudo apt install tox

    - name: Wait before bootstrap
      run: |
        set -eux
        sg microk8s -c 'microk8s status --wait-ready'
        kubectl wait --for=condition=available --timeout=5m -nkube-system deployment/coredns deployment/hostpath-provisioner

    - name: Bootstrap MicroK8s with Juju
      run: |
        sg microk8s 'juju bootstrap microk8s microk8s'
        sg microk8s 'juju add-model coredns microk8s'

    - name: Build charm
      run: |
        charmcraft pack --destructive-mode

    - name: Deploy CoreDNS
      run: |
        upstream_image=$(yq eval '.resources.coredns-image.upstream-source' metadata.yaml)
        juju deploy ./coredns_ubuntu-20.04-amd64.charm --resource coredns-image=$upstream_image --config forward=8.8.8.8

    - name: Wait for stable environment
      run: juju wait -wv

    - name: Tell MicroK8s to use CoreDNS charm
      run: |
        cluster_ip=$(sudo microk8s.kubectl get svc -n coredns coredns -o jsonpath='{..spec.clusterIP}')
        sudo sed -i -e "s/--cluster-dns=.*/--cluster-dns=$cluster_ip/" /var/snap/microk8s/current/args/kubelet
        sudo systemctl restart snap.microk8s.daemon-kubelet

    - name: Run functional test
      run: tox -e func

    - name: Setup Debug Artifact Collection
      run: mkdir tmp
      if: failure()

    - name: Collect charmcraft logs
      if: failure()
      run: cat /home/runner/snap/charmcraft/common/charmcraft-log-* | tee tmp/charmcraft.log

    - name: Collect Juju status
      if: failure()
      run: juju status | tee tmp/juju-status.txt

    - name: Collect Juju log
      if: failure()
      run: juju debug-log --replay --no-tail | tee tmp/juju-status.txt

    - name: Collect Kube status
      if: failure()
      run: |
        kubectl get all -A | tee tmp/kube-summary.txt
        kubectl describe virtualservices -A | tee tmp/kube-virtualservices.txt
        kubectl describe gateways -A | tee tmp/kube-gateways.txt
        kubectl describe deployments -A | tee tmp/kube-deployments.txt
        kubectl describe replicasets -A | tee tmp/kubectl-replicasets.txt

    - name: Collect Kube logs
      if: failure()
      run: |
        kubectl logs -n coredns -l juju-app=coredns | tee tmp/coredns.log

    - name: Upload debug artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: test-run-artifacts
        path: tmp
